@startuml trabalho_engenharia_persistence

package "persistence" {
    ' A classe Pessoa tem os métodos get e set para lista telefônica e
    ' endereço, pois tais classes estão presentes na classe Pessoa, só
    ' não estão presentes no diagrama pois a relação já indica a presença.
    class Pessoa {
        - nome: String
        - sobrenome: String
        - cpf: String
        - sexo: String
        - raca: String

        + getNome(): String
        + setNome(nome: String): boolean
        + getSobrenome(): String
        + setSobrenome(sobrenome: String): boolean
        + getCpf(): String
        + setCpf(cpf: String): boolean
        + getEndereco(): Endereco
        + setEndereco(endereco: Endereco): boolean
        + getListTelefone(): List<Telefone>
        + addTelefone(telefone: Telefone): boolean
        + getSexo(): String
        + setSexo(sexo: String): boolean
        + getRaca(): String
        + setRaca(raca: String): boolean
    }


    '  Aluno herda da classe Pessoa
    Pessoa <|-- Aluno
    ' A relação de aluno para curso é de 1 para muitos, pois um aluno pode
    ' estar matriculado em mais de um curso. Já a relação de curso para aluno
    ' é de 0 para muitos, pois um curso pode não ter nenhum aluno matriculado.
    Aluno "1..*" -- "0..*" Curso
    ' Um aluno pode estar em zero ou mais ofertas, porém uma oferta deve ter
    ' pelo menos um aluno.
    Aluno "0..*" -- "1..*" Oferta
    (Aluno, Oferta) .. CursaOferta
    class Aluno {
        - dataIngresso: Date
        - dataNascimento: Date

        + getDataIngresso(): Date
        + setDataIngresso(data: Date): boolean
        + getDataNascimento(): Date
        + setDataNascimento(data: Date): boolean
    }

    class CursaOferta {
        - nota: float
        - presenca: float

        + getNota(): float
        + setNota(nota: float): boolean
        + getPresenca(): float
        + setPresenca(presenca: float): boolean
    }

    
    ' Professor herda da classe Pessoa.
    Pessoa <|-- Professor
    ' A relação de professor para curso é de 1 para muitos, pois um professor
    ' pode lecionar em mais de um curso. Já a relação de curso para professor
    ' é de 0 para muitos, pois um curso pode não ter nenhum professor lecionando.
    Professor "1..*" -- "0..*" Curso
    ' Um professor pode lecionar zero ou mais ofertas, porém uma oferta só pode
    ' ter um professor.
    Professor "0..*" -- "1..1" Oferta
    class Professor {
        - dataContratacao: Date
        - departamento: String
        - salario: float

        + getSalario(): float
        + setSalario(salario: float): boolean
        + getDepartamento(): String
        + setDepartamento(departamento: String): boolean
        + getDataContratacao(): Date
        + setDataContratacao(data: Date): boolean
    }

    ' Uma pessoa só pode ter um endereço, mas um endereço pode estar
    ' associado a mais de uma pessoa.
    Pessoa "1..1" -- "1..*" Endereco
    class Endereco {
        - logradouro: String
        - local: String
        - numero: int
        - cep: String
        - tipo: String

        + getLogradouro(): String
        + setLogradouro(logradouro: String): boolean
        + getLocal(): String
        + setLocal(local: String): boolean
        + getNumero(): int
        + setNumero(numero: int): boolean
        + getCep(): String
        + setCep(cep: String): boolean
        + getTipo(): String
        + setTipo(tipo: String): boolean
    }


    ' A relação é simples, já que uma pessoa pode ter vários telefones,
    ' mas um telefone pode ou não estar associado a uma pessoa.
    Pessoa "1..*" -- "0..1" Telefone
    class Telefone {
        - cod_pais: int
        - ddd: int
        - number: int

        + getCodPais(): int
        + setCodPais(codPais: int): boolean
        + getDdd(): int
        + setDdd(ddd: int): boolean
        + getNumber(): int
        + setNumber(number: int): boolean
    }

    class Curso {
        - nome: String

        + getNomeCurso(): String
        + setNomeCurso(nome: String): boolean
    }

    Campus "1..*" -- "1..*" Curso
    class Campus {
        - nome: String
        - endereco: Endereco

        + getNomeCurso(): String
        + setNomeCurso(nome: String): boolean
        + getEndereco(): Endereco
        + setEndereco(endereco: Endereco): boolean
    }

    ' A relação é de muitos para muitos para as duas classes. 
    ' Dessa forma, não existe uma relação de agregação ou composição.
    Disciplina "1..*" -- "1..*" Curso
    class Disciplina {
        - nome: String
        - descricao: String
        - preRequisitos: List < Disciplina >

        + getNome(): String
        + setNome(nome: String): boolean
        + getDescricao(): String
        + setDescricao(descricao: String): boolean
        + getListPreRequisitos(): List<Disciplina>
        + addPreRequisito(preRequisito: Disciplina): boolean
    }

    ' Uma oferta só pode estar associada a uma disciplina, mas uma disciplina
    ' pode ter várias ofertas. Da mesma forma, uma oferta só pode ser ministrada
    ' em uma sala, mas uma sala pode ter várias ofertas durante os horários.
    ' Além disso, Sala e Disciplina estão ímplicitos na classe Oferta, por isso
    ' não estão presentes no diagrama.
    Oferta "1..1" -- "1..*" Disciplina
    Oferta "1..1" -- "1..*" Sala
    class Oferta {
        - semestre: enum
        - ano: int

        + getSemestre(): enum
        + setSemestre(semestre: enum): boolean
        + getAno(): int
        + setAno(ano: int): boolean
        + getSala(): Sala
        + setSala(sala: Sala): boolean
        + getDisciplina(): Disciplina
        + setDisciplina(disciplina: Disciplina): boolean
        + getPeriodo(): Periodo
        + setPeriodo(periodo: Periodo): boolean
    }

    Horario "1..1" --o "1..*" Periodo
    class Horario {
        - dia: Date
        - horaInicial: Time
        - horaFinal: Time

        + getPeriodo(): Periodo
        + setPeriodo(periodo: Periodo): boolean
        + getDia(): Date
        + setDia(dia: Date): boolean
        + getHoraInicial(): Time
        + setHoraInicial(horaInicial: Time): boolean
        + getHoraFinal(): Time
        + setHoraFinal(horaFinal: Time): boolean
    }

    ' Periodo só vai existir a partir de uma oferta, por isso a relação
    ' é de composição. Além disso, um período só pode estar associado a 
    ' uma oferta, e uma oferta só pode ter um período.
    Periodo --* Oferta
    class Periodo {
        - estado: enum

        + getEstado(): enum
        + setEstado(estado: enum): boolean
        + getListHorarios(): List<Horario>
        + addHorario(horario: Horario): boolean
    }

    ' Sala tem get e set para equipamentos, mas os atributos
    ' estão implícitos na classe Sala.
    class Sala {
        - predio: String
        - sala: String
        - capacidade: int

        + getPredio(): String
        + setPredio(predio: String): boolean
        + getSala(): String
        + setSala(sala: String): boolean
        + getCapacidade(): int
        + setCapacidade(capacidade: int): boolean
        + getListEquipamentos(): List<Equipamento>
        + addEquipamento(equipamento: Equipamento): boolean
    }

    ' A relação é de agregação, visto que ModeloEquipamento complementa Equipamento.
    ' Além disso, um modelo de equipamento pode estar associado 
    ' a mais de um equipamento, mas um equipamento só pode estar
    ' associado a um modelo de equipamento.
    ModeloEquipamento "0..*" --o "1..1" Equipamento
    class ModeloEquipamento {
        - nome: String
        - marca String

        + getNome(): String
        + setNome(nome: String): boolean
        + getMarca(): String
        + setMarca(marca: String): boolean
    }

    ' Um equipamento só pode estar em uma sala. Porém, uma sala pode ter
    ' vários equipamentos.
    Equipamento "1..1" -- "1..*" Sala
    class Equipamento {
        - estado: enum
        - data_aquisicao: Date

        + getEstado(): enum
        + setEstado(estado: enum): boolean
        + getDataAquisicao(): Date
        + setDataAquisicao(data: Date): boolean
        + getModeloEquipamento(): ModeloEquipamento
        + setModeloEquipamento(modelo: ModeloEquipamento): boolean
    }
}

@enduml
